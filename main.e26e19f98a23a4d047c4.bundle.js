(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{128:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return updateTitle}));var updateTitle=function updateTitle(){var link;setTimeout((function(){window.top.document.title="PX Blue | React Native Components"}),10),(link=window.top.document.querySelector("link[rel*='icon']")||document.createElement("link")).type="image/x-icon",link.rel="shortcut icon",link.href="./pxblue.png",window.top.document.getElementsByTagName("head")[0].appendChild(link)}},184:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"appliedTheme",(function(){return appliedTheme}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(47),_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(187),_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(679),_pxblue_react_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(293),_pxblue_colors__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(4),_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__=(__webpack_require__(637),__webpack_require__(67)),_material_ui_core__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(681);_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandTitle="PX Blue React Native Component Library",_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandUrl="https://pxblue.github.io","localhost"===window.top.location.hostname?_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandImage=__webpack_require__(643):"/react-native-dev/"===window.top.location.pathname.slice(0,18)?_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandImage=__webpack_require__(644):_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandImage=__webpack_require__(645),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addParameters)({notes:{markdown:"<div> </div>"},options:{theme:_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a,showRoots:!0}});var appliedTheme=Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__.a)(_pxblue_react_themes__WEBPACK_IMPORTED_MODULE_4__.blue);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)((function(storyFn){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_3__.a,{theme:appliedTheme},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_8__.a,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"wrapper",style:{color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_5__.gray[800]}},storyFn()))}))},292:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"stories",(function(){return stories}));var _material_ui_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(186),_material_ui_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(684),_material_ui_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(98),_material_ui_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(683),_storybook_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(47),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),_storybook_config__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(184),_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(4),_src_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(128),backgroundImage=__webpack_require__(650),packageJSON=__webpack_require__(651),stories=Object(_storybook_react__WEBPACK_IMPORTED_MODULE_4__.storiesOf)("Intro/Overview",module),useStyles=Object(_material_ui_core__WEBPACK_IMPORTED_MODULE_0__.a)((function(){return Object(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.a)({root:{color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50],backgroundColor:_storybook_config__WEBPACK_IMPORTED_MODULE_6__.appliedTheme.palette.primary.main,backgroundImage:"url("+backgroundImage+")",height:"100%",width:"100%",display:"flex",alignContent:"center",justifyContent:"center",backgroundPosition:"center",backgroundSize:"200%"},container:{display:"flex",flexDirection:"column",justifyContent:"center",textAlign:"center",padding:"0 8px"},icon:{textAlign:"center"},description:{maxWidth:900,padding:20,paddingBottom:0,fontWeight:400},link:{minWidth:100,fontWeight:600,borderColor:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50],textTransform:"none","&:hover":{borderColor:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]}},githubIcon:{width:24,height:24,marginRight:8,fill:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]},github:{fontWeight:400,color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]},buttons:{display:"flex",justifyContent:"space-around",marginTop:36}})}));stories.addParameters({options:{showPanel:!1}}),stories.add("PX Blue React Native Components",(function(){var banner;(banner=window.top.document.getElementsByClassName("simplebar-content")[1]).setAttribute("style","display: unset"),window.top.location.href.includes("/info/")&&(window.top.history.replaceState(null,"",window.top.location.href.replace("/info/","/story/")),banner.children[0].children[0].children[0].children[0].click()),Object(_src_utils__WEBPACK_IMPORTED_MODULE_8__.a)();var classes=useStyles(),icon=__webpack_require__(652);return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.root},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.container},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.icon},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img",{src:icon,alt:"pxb-icon",className:"rotate"})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"h2"},"Power Xpert ",react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("strong",null,"Blue")),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"h4"},"React Native Component Library"),packageJSON.version&&react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"subtitle1"},"v",packageJSON.version),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"subtitle1",className:classes.description},"Learn about our PX Blue components in the API section."),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.buttons},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_3__.a,{variant:"outlined",color:"primary",className:classes.link,target:"_blank",href:"https://github.com/pxblue/react-native-component-library"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",className:classes.githubIcon},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("title",null,"github"),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("rect",{width:"24",height:"24",fill:"none"}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("path",{d:"M12,2A10,10,0,0,0,8.84,21.5c.5.08.66-.23.66-.5V19.31C6.73,19.91,6.14,18,6.14,18A2.69,2.69,0,0,0,5,16.5c-.91-.62.07-.6.07-.6a2.1,2.1,0,0,1,1.53,1,2.15,2.15,0,0,0,2.91.83,2.16,2.16,0,0,1,.63-1.34C8,16.17,5.62,15.31,5.62,11.5a3.87,3.87,0,0,1,1-2.71,3.58,3.58,0,0,1,.1-2.64s.84-.27,2.75,1a9.63,9.63,0,0,1,5,0c1.91-1.29,2.75-1,2.75-1a3.58,3.58,0,0,1,.1,2.64,3.87,3.87,0,0,1,1,2.71c0,3.82-2.34,4.66-4.57,4.91a2.39,2.39,0,0,1,.69,1.85V21c0,.27.16.59.67.5A10,10,0,0,0,12,2Z"})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"subtitle2",className:classes.github},"Github")))))}))}.call(this,__webpack_require__(183)(module))},298:function(module,exports,__webpack_require__){__webpack_require__(299),__webpack_require__(445),__webpack_require__(184),module.exports=__webpack_require__(648)},363:function(module,exports){},643:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxblue-react-native-alpha.437f65ed.svg"},644:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxblue-react-native-beta.5b3ee5c0.svg"},645:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxblue-react-native.c4092748.svg"},648:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(47);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(649),__webpack_require__(655)],module)}.call(this,__webpack_require__(183)(module))},649:function(module,exports,__webpack_require__){var map={"./welcome.stories.tsx":292};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=649},650:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/circles-bg.8d837a68.svg"},652:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxb-icon.c26b974a.svg"},655:function(module,exports,__webpack_require__){var map={"./api.stories.tsx":656,"./welcome.stories.tsx":292};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=655},656:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"stories",(function(){return stories}));var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(47),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_src_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(128),stories=Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.storiesOf)("Components/Documentation",module),getReadMe=function(name){var md=__webpack_require__(657)("./"+name);return md.default=md.default.replace(/\(.\/.*md\)/g,(function(substring){return"("+window.top.location.href.split("/?")[0]+"?path=/info/api-documentation--"+substring.split("/")[1].split(".")[0].replace(/\.?([A-Z])/g,(function(x){return"-"+x.toLowerCase()}))+")"})),md},docFn=function(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,((banner=window.top.document.getElementsByClassName("simplebar-content")[1]).setAttribute("style","display: none"),window.top.location.href.includes("/story/")&&(window.top.history.replaceState(null,"",window.top.location.href.replace("/story/","/info/")),banner.children[0].children[0].children[0].children[1].click()),void Object(_src_utils__WEBPACK_IMPORTED_MODULE_2__.a)()));var banner};stories.add("Channel Value",docFn,{notes:{markdown:getReadMe("ChannelValue.md")}}),stories.add("Empty State",docFn,{notes:{markdown:getReadMe("EmptyState.md")}}),stories.add("Drawer",docFn,{notes:{markdown:getReadMe("Drawer.md")}}),stories.add("Header",docFn,{notes:{markdown:getReadMe("Header.md")}}),stories.add("Hero",docFn,{notes:{markdown:getReadMe("Hero.md")}}),stories.add("Icon Wrapper",docFn,{notes:{markdown:getReadMe("IconWrapper.md")}}),stories.add("Info List Item",docFn,{notes:{markdown:getReadMe("InfoListItem.md")}}),stories.add("Score Card",docFn,{notes:{markdown:getReadMe("ScoreCard.md")}}),stories.add("Typography",docFn,{notes:{markdown:getReadMe("Typography.md")}})}.call(this,__webpack_require__(183)(module))},657:function(module,exports,__webpack_require__){var map={"./ChannelValue.md":658,"./Drawer.md":659,"./EmptyState.md":660,"./Header.md":661,"./Hero.md":662,"./IconWrapper.md":663,"./InfoListItem.md":664,"./README.md":665,"./ScoreCard.md":666,"./Typography.md":667,"./images/channelValue.png":668,"./images/emptyState.png":669,"./images/header_large.png":670,"./images/header_small.png":671,"./images/hero.png":672,"./images/infoListItem.png":673,"./images/scorecard.png":674,"./images/scorecard_alt.png":675,"./images/typography.png":676};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=657},658:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Channel Value\n\nThe `<ChannelValue>` component is used to display...a channel value (and units). This component abstracts the styles used to display the channel and units as well as an optional inline icon. These are used as part of the [Hero](./Hero.md) component, but can also be used inline (e.g., in a list)\n\n<img width=\"300\" alt=\"Channel Value component\" src=\"./images/channelValue.png\">\n\n> Note: If provided, the IconClass must be a `React.ComponentClass` or `React.FunctionComponent` with props of `{ size: number, color: string }`. This library exposes a `wrapIcon` higher-order function that can convert components from `react-native-vector-icons` or from `@pxblue/icons-svg` to this format. See [IconWrapper](./IconWrapper.md).\n\n## Usage\n\n```tsx\nimport { ChannelValue, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<ChannelValue\n    value={100}\n    units={'%'}\n    IconClass={Battery}\n/>\n```\n\n## API\n\n<div style=\"overflow: auto\">\n\n| Prop Name | Description                           | Type                                                 | Required | Default             |\n| --------- | ------------------------------------- | ---------------------------------------------------- | -------- | ------------------- |\n| value     | The value shown below the icon        | `string` \\| `number`                                 | yes      |                     |\n| IconClass | A component to render for the icon    | `React.Component<{ size: number, color: string }>`   | no       |                     |\n| IconProps | Props to pass through to the icon     | `{ size?: number, color?: string }`                  | no       |                     |\n| units     | The units for the supplied value      | `string`                                             | no       |                     |\n| prefix    | If true, shows units before the value | `boolean`                                            | no       | false               |\n| fontSize  | The size of the font for the value    | `number`                                             | no       | 'medium'            |\n| color     | The color used for the text elements  | `string`                                             | no       | `theme.colors.text` |\n| theme     | Theme partial for default styling     | `Theme`                                              | no       |                     |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name  | Description                         |\n| ----- | ----------------------------------- |\n| root  | Styles applied to the root element  |\n| units | Styles applied to the units element |\n| value | Styles applied to the value element |"},659:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Drawer\n\nThe `<Drawer>` component is side-menu that houses navigation items. Its anatomy can be broken down into four subsections: `<DrawerHeader>`, `<DrawerSubheader>`, `<DrawerBody`>, and a `<DrawerFooter>`.\nTo integrate in-app navigation, the `<Drawer>` component needs to be paired with a navigation provider; we recommend using [React Navigation](https://reactnavigation.org/docs/getting-started).\n\nTo learn more about the Navigation design pattern, check out our [documentation](https://pxblue.github.io/patterns/navigation).\n\n## Usage\n\n```tsx\nimport { Drawer, DrawerHeader, DrawerBody, NavItem } from '@pxblue/react-native-components';\n...\n<Drawer activeItem={selectedItem} onItemSelect={(id) => {/* updateSelectedItem */}}>\n    <DrawerHeader title={'Drawer Title'} subtitle={'Drawer Subtitle'} icon={<Menu/>} />\n    <DrawerSubheader>{/* contents */ }</DrawerSubheader>\n    <DrawerBody>\n        <DrawerNavGroup title={'Navigation Group'} items={[{\n            title: 'Identity Management',\n            itemID: 'g1i1',\n        }]} />\n    </DrawerBody>\n    <DrawerFooter>{/* contents */ }</DrawerFooter>\n</Drawer>\n}\n```\n\n## API \n\nThe following props can be set at any level in the drawer hierarchy (`<Drawer>`, `<DrawerBody>`, `<DrawerNavGroup>`, `NavItem`, or `NestedNavItem`). If they are set on a parent, they will be used for all children. For more customization, you can set these props on individual children and they will override any value set on the parent.\n\n<div style=\"overflow: auto;\">\n\n| Name                      | Description                                               | Type                    | Required | Default                                                      |\n| ------------------------- | --------------------------------------------------------- | ----------------------- | -------- | ------------------------------------------------------------ |\n| activeItem                | ItemID of the currently selected item                     | `string`                | no       |                                                              |\n| activeItemBackgroundColor | Background color for the 'active' item                    | `string`                | no       | varies for light/dark theme                                  |\n| activeItemBackgroundShape | shape of the active item background                       | `'round'` \\| `'square'` | no       | round                                                        |\n| activeItemFontColor       | Font color for the 'active' item                          | `string`                | no       | varies for light/dark theme                                  |\n| activeItemIconColor       | Icon color for the 'active' item                          | `string`                | no       | varies for light/dark theme                                  |\n| chevron                   | Whether to have chevrons for all menu items               | `boolean`               | no       | false                                                        |\n| collapseIcon              | Icon used to collapse drawer                              | `JSX.Element`           | no       | `expandIcon` rotated 180 degrees                             |\n| divider                   | Whether to show a line between all items                  | `boolean`               | no       | true                                                         |\n| expandIcon                | Icon used to expand drawer                                | `JSX.Element`           | no       | `expand-more` at top-level, `arrow-drop-down` otherwise      |\n| hidePadding               | Whether to hide the paddings reserved for menu item icons | `boolean`               | no       | true                                                         |\n| itemFontColor             | The color used for the item text                          | `string`                | no       |                                                              |\n| itemIconColor             | The color used for the icon                               | `string`                | no       |                                                              |\n\n</div>\n\n\n# DrawerHeader\nThe `<DrawerHeader>` is a subsection that appears at the top of `<Drawer>`. Its content can be provided by the `title`, `subtitle`, and `icon` props, or can be entirely custom content.\n\n## API\n\n<div style=\"overflow: auto\">\n\n| Prop Name         | Description                                    | Type                   | Required | Default                      |\n| ----------------- | ---------------------------------------------- | ---------------------- | -------- | ---------------------------- |\n| backgroundColor   | The color used for the background              | `string`               | no       | `theme.colors.primary`       |\n| backgroundImage   | An image to display in the header              | `ImageSourcePropType`  | no       |                              |\n| backgroundOpacity | The opacity of the background image            | `number`               | no       | `0.3`                        |\n| fontColor         | The color of the text elements                 | `string`               | no       | `theme.colors.surface`       |\n| icon              | A component to render for the icon             | `ReactNode`            | no       |                              |\n| subtitle          | The text to show on the second line            | `string`               | no       |                              |\n| title             | The text to show on the first line             | `string`               | no       |                              |\n| titleContent      | Custom content for header title area           | `ReactNode`            | no       |                              |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name                     | Description                                    |\n| ------------------------ | ---------------------------------------------- |\n| root                     | Styles applied to the root element             |\n| backgroundImageWrapper   | Styles applied to the background image wrapper |\n| backgroundImage          | Styles applied to the background image         |\n| content                  | Styles applied to the content wrapper          |\n| textContent              | Styles applied to the text wrapper             |\n| title                    | Styles applied to the title element            |\n| subtitle                 | Styles applied to the subtitle element         |\n| icon                     | Styles applied to the left icon element        |\n\n\n# DrawerSubheader\nThe `<DrawerSubheader>` is an optional subsection that will appear below the `<DrawerHeader>` and above the `<DrawerBody>`.\n\n# DrawerBody\nThe `<DrawerBody>` consists of `<DrawerNavGroup>` children and renders the navigation items found within the `<Drawer>`. \n\n## API\nThe `<DrawerBody>` supports all inheritable properties found within the `<Drawer>` API section and all properties from the React Native ScrollView.\n\n# DrawerNavGroup\nA `<DrawerNavGroup>` consists of a `title` or custom `titleContent` and houses the navigation items found in the `<Drawer>`.\n\n## API \nThe `<DrawerNavGroup>` supports all inheritable properties found within the `<Drawer>` API section. It also supports these additional props:\n\n<div style=\"overflow: auto\">\n\n| Prop Name         | Description                                    | Type              | Required | Default                      |\n| ----------------- | ---------------------------------------------- | ----------------- | -------- | ---------------------------- |\n| items             | Navigation items to render                     | `NavItem[]`       | yes      |                              |\n| title             | Text alternative to title                      | `string`          | no       |                              |\n| titleContent      | Custom content for the title area              | `ReactNode`       | no       |                              |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name                     | Description                                         |\n| ------------------------ | --------------------------------------------------- |\n| root                     | Styles applied to the root element                  |\n| content                  | Styles applied to the content wrapper               |\n| textContent              | Styles applied to the text wrapper                  |\n| title                    | Styles applied to the title element                 |\n| divider                  | Styles applied to the divider elements              |\n| navItem                  | Styles passed to the underlying NavItem (see below) |\n\n## NavItem\nA `<NavItem>` is a clickable link that appears within a `<DrawerNavGroup>`.  They can be used for navigation between pages, or can be a `NestedNavItem` that can expand or collapse other sub-`NavItem`s. \nA `<NavItem>` supports all inheritable properties found within the `<Drawer>` API section.  It also supports these additional props:\n\n<div style=\"overflow: auto\">\n\n| Prop Name         | Description                                      | Type              | Required | Default                      |\n| ----------------- | ------------------------------------------------ | ----------------- | -------- | ---------------------------- |\n| icon              | Icon to display, not applicable to `NestNavItem` | `ReactNode`       | no       |                              |\n| itemID            | ID used to distinguish item as unique            | `string`          | yes      |                              |\n| items             | Sub items to show/hide when clicked              | `NestedNavItem[]` | no       |                              |\n\n</div>\n\nA `<NavItem>` is built using our `<InfoListItem>` component and inherits all of its properties. \nA `<NestedNavItem>` has all the same properties as a `<NavItem>` but does not support icons. \n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name                     | Description                                         |\n| ------------------------ | --------------------------------------------------- |\n| root                     | Styles applied to the root element                  |\n| activeBackground         | Styles applied to the background of an active item  |\n| infoListItem             | Styles passed to the underlying InfoListItem        |\n\n# DrawerFooter\nThe `<DrawerFooter>` is an optional subsection that will be pinned to the bottom of the `<Drawer`>.\n"},660:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Empty State\n\nThe `<EmptyState>` component is an element that can be used as a placeholder when no data is present (such as an empty list, or a placeholder page for future content). This is only used when no data is available, rather than during loading (see [empty states pattern](https://pxblue.github.io/patterns/empty-states)).\n\n<img width=\"500\" alt=\"Empty state with all props\" src=\"./images/emptyState.png\">\n\n## Usage\n\n```tsx\nimport { EmptyState, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<EmptyState\n    title={'Nothing Found'}\n    description={'Not a single thing'}\n    IconClass={Battery}\n/>\n```\n\n## API\n\n<div style=\"overflow: auto\">\n\n| Prop Name   | Description                            | Type                                               | Required | Default |\n| ----------- | -------------------------------------- | -------------------------------------------------- | -------- | ------- |\n| title       | The main text to display               | `string`                                           | yes      |         |\n| description | The secondary text to display          | `string`                                           | no       |         |\n| IconClass   | The primary icon                       | `React.Component<{ size: number, color: string }>` | no       |         |\n| IconProps | Props to pass through to the icon     | `{ size?: number, color?: string }`                | no       |                     |\n| iconSize    | The size of the primary icon (100-200) | `number`                                           | no       | 100     |\n| iconColor   | The color of the primary icon          | `string`                                           | no       | `text`  |\n| actions     | Additional components to render below  | `JSX.Element`                                      | no       |         |\n| theme       | Theme partial for default styling      | `Theme`                                            | no       |         |\n\n</div>\n\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name  | Description                         |\n| ----- | ----------------------------------- |\n| root  | Styles applied to the root element  |\n| units | Styles applied to the units element |\n| value | Styles applied to the value element |"},661:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='# Header\n\nThe `<Header>` component is used at the top of the page to display page information. It shows a title and has optional parameters to show a subtitle, background image, navigation button, and multiple action buttons. The header can also be configured to expand/collapse as desired.\n\n<img width="400" alt="Collapsed header" src="./images/header_small.png">\n<img width="400" alt="Expanded header" src="./images/header_large.png">\n\n## Usage\n\n```tsx\nimport { Header } from \'@pxblue/react-native-components\';\nimport Icon from \'react-native-vector-icons/MaterialIcons\';\nconst MenuIcon = wrapIcon({IconClass: Icon, name:\'menu\'});\nconst MoreIcon = wrapIcon({IconClass: Icon, name:\'more-vert\'});\n...\n<Header\n    title={\'Valley Forge\'}\n    subtitle={\'The Last Stand\'}\n    navigation={{icon: MenuIcon, onPress: () => {}}}\n    actionItems={[\n        {icon: MoreIcon, onPress: () => {}}\n    ]}\n/>\n```\n\n## API\n\n<div style="overflow: auto">\n\n| Prop Name        | Description                             | Type                  | Required | Default                  |\n| ---------------- | --------------------------------------- | --------------------- | -------- | ------------------------ |\n| title            | The text to show on the first line      | `string`              | yes      |                          |\n| subtitle         | The text to show on the second line     | `string`              | no       |                          |\n| info             | Third line of text (hidden on collapse) | `string`              | no       |                          |\n| navigation       | Icon to show left of the title          | `HeaderIcon`          | no       |                          |\n| actionItems      | Icons to show to the right of the title | `HeaderIcon[]`        | no       |                          |\n| expandable       | Allow the header to expand/collapse     | `boolean`             | no       | `false`                  |\n| startExpanded    | Default the header to expanded          | `boolean`             | no       | `false`                  |\n| backgroundColor  | The color used for the background       | `string`              | no       | `theme.colors.primary`   |\n| fontColor        | The color used for the text             | `string`              | no       | `theme.colors.onPrimary` |\n| backgroundImage  | An image to display in the header       | `ImageSourcePropType` | no       |                          |\n| searchableConfig | Configuration for search behavior       | `SearchableConfig`    | no       |                          |\n| theme            | Theme partial for default styling       | `Theme`               | no       |                          |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name              | Description                                    |\n| ----------------- | ---------------------------------------------- |\n| root              | Styles applied to the root element             |\n| backgroundImage   | Styles applied to the background image         |\n| content           | Styles applied to the content wrapper          |\n| navigationIcon    | Styles applied to the navigation icon          |\n| textContent       | Styles applied to the text wrapper             |\n| title             | Styles applied to the title element            |\n| subtitle          | Styles applied to the subtitle element         |\n| info              | Styles applied to the info element             |\n| search            | Styles applied to the search input element     |\n| actionPanel       | Styles applied to the actions container        |\n| actionItem        | Styles applied to the action icon(s)           |\n\n# HeaderIcon\n\nHeader icons specified as a JSON object with the following properties:\n\n<div style="overflow: auto">\n\n| Key     | Description                        | Type                                               | Required | Default |\n| ------- | ---------------------------------- | -------------------------------------------------- | -------- | ------- |\n| icon    | A component to render for the icon | `React.Component<{ size: number, color: string }>` | yes      |         |\n| onPress | A function to execute when clicked | `function`                                         | yes      |         |\n\n</div>\n\n# SearchableConfig\n\nSearchableConfig is an optional object used to configure the search functionality of the header component. It is a JSON object with the following properties:\n\n<div style="overflow: auto">\n\n| Key            | Description                             | Type                                                                 | Required | Default      |\n| -------------- | --------------------------------------- | -------------------------------------------------------------------- | -------- | ------------ |\n| icon           | An override for the default search icon | `React.Component<{ size: number, color: string }>`                   | no       | `SearchIcon` |\n| placeholder    | Helper text shown in search field       | `string`                                                             | no       | \'Search\'     |\n| autoFocus      | Gives focus to search input when opened | `boolean`                                                            | no       | `false`      |\n| onChangeText   | Callback when search text changes       | `function`                                                           | no       | `null`       |\n| autoCapitalize | Auto-capitalize search input            | [`TextInput.autoCapitalize`](https://reactnative.dev/docs/textinput) | no       | \'none\'       |\n| autoCorrect    | Auto-correct search input               | `boolean`                                                            | no       | `false`      |\n\n</div>\n'},662:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Hero Components\n\nHero items are used to call attention to particular values.\n\n<img width=\"500\" alt=\"Hero Banner with heroes\" src=\"./images/hero.png\">\n\n## Hero\n\nThe `<Hero>` component displays a particular icon, value/units, and a label. The [IconClass](./IconWrapper.md) property will accept any valid icon from [`react-native-vector-icons`](https://www.npmjs.com/package/react-native-vector-icons) and [`@pxblue/icons-svg`](https://www.npmjs.com/package/@pxblue/icons-svg).\n\n> In the future this component will be extended to work with other graphic types, including progress icons, text, and emojis.\n\nThe value section of the Hero utilizes a [`<ChannelValue>`](./ChannelValue.md) component. To display a single simple value, the information can be passed as props (`value`, `units`, `valueIcon`). For more complex values (such as a duration that displays hours and minutes), you can pass in `<ChannelValue>` components as children and they will be displayed inline.\n\n### Hero Usage\n\n```tsx\nimport { Hero, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<Hero\n    label={'Charge'}\n    IconClass={Battery}\n    value={100}\n    units={'%'}\n/>\n```\n\n### Hero API\n\n<div style=\"overflow: auto\">\n\n| Prop Name           | Description                             | Type                                               | Required | Default                |\n| ------------------- | --------------------------------------- | -------------------------------------------------- | -------- | ---------------------- |\n| label               | The text shown below the `ChannelValue` | `string`                                           | yes      |                        |\n| IconClass           | The primary icon                        | `React.Component<{ size: number, color: string }>` | yes      |                        |\n| iconSize            | The size of the primary icon (10-48)    | `number`                                           | no       | 36                     |\n| iconColor           | The color of the primary icon           | `string`                                           | no       | `text`                 |\n| iconBackgroundColor | The color behind the primary icon       | `string`                                           | no       | `theme.colors.surface` |\n| fontSize            | The text size for the value line        | `number`                                           | no       | 'large'                |\n| value               | The value for the channel               | `string` \\| `number`                               | no       |                        |\n| ValueIconClass      | The icon to show inline with the value  | `React.Component<{ size: number, color: string }>` | no       |                        |\n| valueColor          | Text color for the value line           | `string`                                           | no       | `text`                 |\n| units               | Text to show after the value            | `string`                                           | no       |                        |\n| onPress             | A function to execute when clicked      | `function`                                         | no       |                        |\n| theme               | Theme partial for default styling       | `Theme`                                            | no       |                        |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name        | Description                                  |\n| ----------- | -------------------------------------------- |\n| root        | Styles applied to the root element           |\n| iconWrapper | Styles applied to the icon wrapper element   |\n| values      | Styles applied to the row of `ChannelValue`s |\n| label       | Styles applied to the label element          |\n\n\n## Hero Banner\n\nThe `<HeroBanner>` component is a simple wrapper component that is used to contain `<Hero>`s. It creates the flex container and sets up the spacing rules to display them. It accepts up to four `<Hero>` components by default as children. Any children after the `limit` will not be rendered.\n\n### Hero Banner Usage\n\n```tsx\nimport { Hero, HeroBanner, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n...\n<HeroBanner divider>\n    <Hero label={'Hero One'} IconClass={Battery}/>\n    <Hero label={'Hero Two'} IconClass={Battery}/>\n    <Hero label={'Hero Three'} IconClass={Battery}/>\n    <Hero label={'Hero Four'} IconClass={Battery}/>\n</HeroBanner>\n```\n\n### Hero Banner API\n\n<div style=\"overflow: auto\">\n\n| Prop Name | Description                        | Type      | Required | Default |\n| --------- | ---------------------------------- | --------- | -------- | ------- |\n| divider   | Whether to show the line separator | `boolean` | no       | false   |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name        | Description                                  |\n| ----------- | -------------------------------------------- |\n| root        | Styles applied to the root element           |\n| divider     | Styles applied to the divider element        |\n"},663:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Icon Wrapper\n\nThe Icon Wrapper is a utility that allows the PX Blue components to interact nicely with SVG icons from [`react-native-vector-icons`](https://www.npmjs.com/package/react-native-vector-icons) and [`@pxblue/icons-svg`](https://www.npmjs.com/package/@pxblue/icons-svg). Several components in this library accept a `IconClass` property of the type `React.ComponentType<{ size: number, color: string }>`. This allows the icon to be parameterized while allowing the library component to control the icon's size and color.\n\nHowever, the recommended icon libraries, `@pxblue/icons-svg` and `react-native-vector-icons`, do not not conform to this shape. Therefore, this utility exports `wrapIcon`, a Higher Order Component that can be used to convert them.\n\n### Usage (@pxblue/icons-svg)\n\n```tsx\nimport Leaf from '@pxblue/icons-svg/leaf.svg';\nconst LeafIcon = wrapIcon({ IconClass: Leaf });\n...\n<ComponentName IconClass={LeafIcon}></ComponentName>\n```\n\n### Usage (react-native-vector-icons)\n\nIcons from `react-native-vector-icons` require a class and a name. Refer to [their documentation](https://github.com/oblador/react-native-vector-icons) for which icons are available in each set.\n\n```tsx\nimport MaterialCommunityIcon from 'react-native-vector-icons/MaterialCommunityIcons';\nconst Cloud = wrapIcon({ IconClass: MaterialCommunityIcon, name: 'cloud-off-outline' });\n...\n<ComponentName IconClass={Cloud}></ComponentName>\n```\n\n## Notes\n\nAs with all Higher Order Components, there is a performance hit if the function is called from another component's `render` method. It is therefore advised to always call `wrapIcon()` once per Icon type, and to do so outside of any methods.\n"},664:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Info List Item\n\nThe `<InfoListItem>` is intended to be used in List views. It positions a title as well as optional subtitle(s), icon, and status stripe. The [IconClass](./iconWrapper.md) property will accept any valid icon from [`react-native-vector-icons`](https://www.npmjs.com/package/react-native-vector-icons) or [`@pxblue/icons-svg`](https://www.npmjs.com/package/@pxblue/icons-svg).\n\n<img width=\"400\" alt=\"Info List Item component\" src=\"./images/infoListItem.png\">\n\n## Usage\n\n```tsx\nimport Leaf from '@pxblue/icons-svg/leaf.svg';\nimport { wrapIcon } from '@pxblue/react-native-components';\nconst LeafIcon = wrapIcon({ IconClass: Leaf });\n...\n<InfoListItem\n    title={'Title'}\n    IconClass={LeafIcon}\n    subtitle={'A subtitle'}\n    statusColor={PXBColors.red[500]}\n    backgroundColor={PXBColors.blue[50]}\n/>\n```\n\n### Advanced Usage\n\nYou can also supply an array of items that will be displayed as a character-separated subtitle. The separation character is configurable.\n\n```tsx\n<InfoListItem title={'Hillman Field East'} subtitle={['PXM 2000', 'DT 1150', '113.4 GPM']} subtitleSeparator={'/'} />\n```\n\n## API\n\n<div style=\"overflow: auto\">\n\n| Prop Name         | Description                            | Type                                               | Required | Default        |\n| ----------------- | -------------------------------------- | -------------------------------------------------- | -------- | -------------- |\n| title             | The text to show on the first line     | `string`                                           | yes      |                |\n| subtitle          | The text to show on the second line    | `string` \\| `Array<React.ReactNode>`               | no       |                |\n| subtitleSeparator | Separator character for subtitle       | `string`                                           | no       | '·' ('\\u00B7') |\n| IconClass         | A component to render for the icon     | `React.Component<{ size: number, color: string }>` | no       |                |\n| iconColor         | The color of the primary icon          | `string`                                           | no       |                |\n| hidePadding       | Remove left padding if no icon is used | `boolean`                                          | no       | false          |\n| avatar            | Show colored background for icon       | `boolean`                                          | no       | false          |\n| chevron           | Add a chevron icon on the right        | `boolean`                                          | no       | false          |\n| dense             | Smaller height row with less padding   | `boolean`                                          | no       | false          |\n| divider           | Show a row separator below the row     | `'full'` \\| `'partial'`                            | no       |                |\n| rightComponent    | Component to render on the right side  | `JSX.Element`                                      | no       |                |\n| statusColor       | Status stripe and icon color           | `string`                                           | no       |                |\n| fontColor         | Title text color                       | `string`                                           | no       |                |\n| backgroundColor   | The color used for the background      | `string`                                           | no       |                |\n| onPress           | A function to execute when clicked     | `function`                                         | no       |                |\n| theme             | Theme partial for default styling      | `Theme`                                            | no       |                |\n\n</div>\n\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name              | Description                                     |\n| ----------------- | ----------------------------------------------- |\n| root              | Styles applied to the root element              |\n| statusStripe      | Styles applied to the status stripe element     |\n| iconWrapper       | Styles applied to the icon wrapper              |\n| avatar            | Styles applied to the avatar background         |\n| mainContent       | Styles applied to the main text content wrapper |\n| title             | Styles applied to the title element             |\n| subtitleWrapper   | Styles applied to the subtitle wrapper          |\n| subtitle          | Styles applied to the subtitle text elements    |\n| divider           | Styles applied to the divider element           |"},665:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# React Native Components\n\nWe currently have the following components available for React Native applications:\n\n-   [Channel Value](https://github.com/pxblue/react-native-component-library/blob/dev/docs/ChannelValue.md)\n-   [Drawer](https://github.com/pxblue/react-native-component-library/blob/dev/docs/Drawer.md)\n-   [Empty State](https://github.com/pxblue/react-native-component-library/blob/dev/docs/EmptyState.md)\n-   [Header](https://github.com/pxblue/react-native-component-library/blob/dev/docs/Header.md)\n-   [Hero & Hero Banner](https://github.com/pxblue/react-native-component-library/blob/dev/docs/Hero.md)\n-   [Info List Item](https://github.com/pxblue/react-native-component-library/blob/dev/docs/InfoListItem.md)\n-   [Score Card](https://github.com/pxblue/react-native-component-library/blob/dev/docs/Scorecard.md)\n-   [Typography](https://github.com/pxblue/react-native-component-library/blob/dev/docs/Typography.md)\n"},666:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Score Card\n\nCard component that calls attention to particular values.\n\n<img width=\"40%\" alt=\"Score Card with single highlighted value\" src=\"./images/scorecard.png\"><br/>\n<img width=\"40%\" alt=\"Score Card with multiple highlighted values\" src=\"./images/scorecard_alt.png\">\n\n## Usage\n\n```tsx\nimport { Hero, HeroBanner, InfoListItem, Body, ScoreCard, wrapIcon } from '@pxblue/react-native-components';\nimport MatIcon from 'react-native-vector-icons/MaterialIcons';\nimport _A from '@pxblue/icons-svg/grade_a.svg';\nconst A = wrapIcon({ IconClass: _A });\nconst MoreIcon = wrapIcon({ IconClass: MatIcon, name: 'more-vert' });\n...\n<ScoreCard\n    headerTitle={'Portland Datacenter Long Name'}\n    headerSubtitle={'6 UPS Devices'}\n    actionItems={[\n        { icon: MoreIcon, onPress: () => { } }\n    ]}\n    badgeOffset={-55}\n    badge={\n        <HeroBanner style={{ flex: 0, minWidth: 80, justifyContent: 'flex-end' }}>\n            <Hero\n                label={'Score'}\n                iconSize={48}\n                iconColor={PXBColors.green[500]}\n                value={98}\n                units={'/100'}\n                IconClass={A}\n            />\n        </HeroBanner>\n    }\n    actionRow={\n        <InfoListItem chevron title={'View More'} onPress={() => { }} />\n    }\n>\n    {/* Body Content */}\n</ScoreCard>\n```\n\n## API\n\n<div style=\"overflow: auto\">\n\n| Prop Name             | Description                                 | Type                  | Required | Default                  |\n| --------------------- | ------------------------------------------- | --------------------- | -------- | ------------------------ |\n| headerTitle           | The primary text                            | `string`              | yes      |                          |\n| headerSubtitle        | The secondary text                          | `string`              | no       |                          |\n| headerInfo            | Tertiary text (hidden on collapse)          | `string`              | no       |                          |\n| headerColor           | The color of the header                     | `string`              | no       | `theme.colors.primary`   |\n| headerFontColor       | The color for text and icons in header      | `string`              | no       | `theme.colors.onPrimary` |\n| headerBackgroundImage | An image to display in the header           | `ImageSourcePropType` | no       |                          |\n| actionItems           | Icons to show to the right of the text      | `HeaderIcon[]`        | no       |                          |\n| badge                 | The component to render in the callout area | `React.Component`     | no       |                          |\n| badgeOffset           | Vertical offset for the badge component     | `number`              | no       |                          |\n| actionRow             | Component to render for the footer          | `React.Component`     | no       |                          |\n| theme                 | Theme partial for default styling           | `Theme`               | no       |                          |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name              | Description                                    |\n| ----------------- | ---------------------------------------------- |\n| root              | Styles applied to the root card element        |\n| header            | Styles applied to the card header element      |\n| backgroundImage   | Styles applied to the background image wrapper |\n| headerContent     | Styles applied to the header content wrapper   |\n| headerText        | Styles applied to the header text wrapper      |\n| title             | Styles applied to the title element            |\n| subtitle          | Styles applied to the subtitle element         |\n| info              | Styles applied to the info element             |\n| headerActions     | Styles applied to the header actions wrapper   |\n| headerActionItem  | Styles applied to the header action icons      |\n| body              | Styles applied to the card body element        |\n| leftContent       | Styles applied to the {children} wrapper       |\n| badge             | Styles applied to the badge wrapper            |\n| actionRow         | Styles applied to the action row element       |\n\n# Header Icon\n\nHeader icons specified as a JSON object with the following properties:\n\n<div style=\"overflow: auto\">\n\n| Key     | Description                        | Type                                               | Required | Default |\n| ------- | ---------------------------------- | -------------------------------------------------- | -------- | ------- |\n| icon    | A component to render for the icon | `React.Component<{ size: number, color: string }>` | yes      |         |\n| onPress | A function to execute when clicked | `function`                                         | yes      |         |\n\n</div>"},667:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='# Typography\n\nTypography components are used to render text on the screen. This library provides several helper components that automatically apply various styles from the theme to avoid repeated custom styling throughout an application.\n\n<img width="20%" alt="Typography Elements" src="./images/typography.png">\n\nWe provide components for: `<H1>`, `<H2>`, `<H3>`, `<H4>`, `<H5>`, `<H6>`, `<Body1>`, `<Body2>`, `<Subtitle1>`, `<Subtitle2>`, `<Button>`, `<Caption>`, `<Overline>`\n\n## Usage\n\n```tsx\nimport * as Typography from \'@pxblue/react-native-components\';\n...\n<View>\n    <Typography.H1>Head. 1</Typography.H1>\n    <Typography.H2>Heading 2</Typography.H2>\n    <Typography.H3>Heading 3</Typography.H3>\n    <Typography.H4>Heading 4</Typography.H4>\n    <Typography.H5>Heading 5</Typography.H5>\n    <Typography.H6>Heading 6</Typography.H6>\n    <Typography.Body1>Body 1</Typography.Body1>\n    <Typography.Body2>Body 2</Typography.Body2>\n    <Typography.Subtitle1>Subtitle 1</Typography.Subtitle1>\n    <Typography.Subtitle2>Subtitle 2</Typography.Subtitle2>\n    <Typography.Button>Button</Typography.Button>\n    <Typography.Caption>Caption</Typography.Caption>\n    <Typography.Overline>Overline</Typography.Overline>\n</View>\n```\n\n## API\n\nAll typography components in this library share a common API.\n\n<div style="overflow: auto">\n\n| Prop Name | Description                         | Type                                                                                | Required | Default |\n| --------- | ----------------------------------- | ----------------------------------------------------------------------------------- | -------- | ------- |\n| font      | The font style (from the theme)     | keyof [`theme.fonts`](https://callstack.github.io/react-native-paper/theming.html)  | no       |         |\n| fontSize  | The font size (from the theme)      | `number`                                                                            | no       |         |\n| color     | The font color (from theme palette) | keyof [`theme.colors`](https://callstack.github.io/react-native-paper/theming.html) | no       | \'text\'  |\n| theme     | Theme partial for default styling   | `Theme`                                                                             | no       |         |\n\n</div>\n\n### Styles\n\nYou can override the internal styles used by PX Blue by passing a `styles` prop. It supports the following keys:\n\n| Name  | Description                         |\n| ----- | ----------------------------------- |\n| root  | Styles applied to the root element  |'},668:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/channelValue.c84086af.png"},669:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/emptyState.d3a96eba.png"},670:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/header_large.e211227c.png"},671:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/header_small.66ecd4fd.png"},672:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/hero.b0ba02dc.png"},673:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/infoListItem.20db400d.png"},674:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/scorecard.832b4550.png"},675:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/scorecard_alt.8f5c5025.png"},676:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/typography.5fddc024.png"}},[[298,1,2]]]);
//# sourceMappingURL=main.e26e19f98a23a4d047c4.bundle.js.map