(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{184:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"appliedTheme",(function(){return appliedTheme}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(47),_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(186),_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(667),_pxblue_themes__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(292),_pxblue_colors__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(4),_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__=(__webpack_require__(639),__webpack_require__(97));_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandTitle="PX Blue React Native Component Library",_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandImage=__webpack_require__(645),_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a.brandUrl="https://pxblue.github.io",Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addParameters)({notes:{markdown:"<div> </div>"},options:{theme:_pxblue_storybook_themes__WEBPACK_IMPORTED_MODULE_7__.a,showRoots:!0}});var appliedTheme=Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__.a)(_pxblue_themes__WEBPACK_IMPORTED_MODULE_4__.ReactThemes.blue);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)((function(storyFn){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_3__.a,{theme:appliedTheme},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"wrapper",style:{color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_5__.gray[800]}},storyFn()))}))},291:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"stories",(function(){return stories}));var _material_ui_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(669),_material_ui_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(672),_material_ui_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(129),_material_ui_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(671),_storybook_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(47),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),_storybook_config__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(184),_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(4),backgroundImage=__webpack_require__(650),stories=Object(_storybook_react__WEBPACK_IMPORTED_MODULE_4__.storiesOf)("Intro/Welcome",module),useStyles=Object(_material_ui_core__WEBPACK_IMPORTED_MODULE_0__.a)((function(){return Object(_material_ui_core__WEBPACK_IMPORTED_MODULE_1__.a)({root:{color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50],backgroundColor:_storybook_config__WEBPACK_IMPORTED_MODULE_6__.appliedTheme.palette.primary[500],backgroundImage:"url("+backgroundImage+")",height:"100%",width:"100%",display:"flex",alignContent:"center",justifyContent:"center"},container:{display:"flex",flexDirection:"column",justifyContent:"center",textAlign:"center"},icon:{textAlign:"center"},description:{maxWidth:900,padding:36,paddingBottom:0,fontWeight:100},link:{minWidth:100,fontWeight:600,borderColor:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50],textTransform:"none","&:hover":{borderColor:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]}},githubIcon:{width:24,height:24,marginRight:8,fill:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]},github:{fontWeight:100,color:_pxblue_colors__WEBPACK_IMPORTED_MODULE_7__.white[50]},buttons:{display:"flex",justifyContent:"space-around",marginTop:36}})}));stories.addParameters({options:{showPanel:!1}}),stories.add("to pxblue",(function(){var banner;(banner=window.top.document.getElementsByClassName("simplebar-content")[1]).setAttribute("style","display: unset"),window.top.location.href.includes("/info/")&&(window.top.history.replaceState(null,"",window.top.location.href.replace("/info/","/story/")),banner.children[0].children[0].children[0].children[0].click());var classes=useStyles(),icon=__webpack_require__(651);return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.root},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.container},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.icon},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img",{src:icon,alt:"pxb-icon",className:"rotate"})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"h2"},"Power Xpert ",react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("strong",null,"Blue")),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"h4"},"React Native Component Library"),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"subtitle1",className:classes.description},"Learn about our PX Blue components in the API section."),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{className:classes.buttons},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_3__.a,{variant:"outlined",color:"primary",className:classes.link,target:"_blank",href:"https://github.com/pxblue/react-native-component-library"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",className:classes.githubIcon},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("title",null,"github"),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("rect",{width:"24",height:"24",fill:"none"}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("path",{d:"M12,2A10,10,0,0,0,8.84,21.5c.5.08.66-.23.66-.5V19.31C6.73,19.91,6.14,18,6.14,18A2.69,2.69,0,0,0,5,16.5c-.91-.62.07-.6.07-.6a2.1,2.1,0,0,1,1.53,1,2.15,2.15,0,0,0,2.91.83,2.16,2.16,0,0,1,.63-1.34C8,16.17,5.62,15.31,5.62,11.5a3.87,3.87,0,0,1,1-2.71,3.58,3.58,0,0,1,.1-2.64s.84-.27,2.75,1a9.63,9.63,0,0,1,5,0c1.91-1.29,2.75-1,2.75-1a3.58,3.58,0,0,1,.1,2.64,3.87,3.87,0,0,1,1,2.71c0,3.82-2.34,4.66-4.57,4.91a2.39,2.39,0,0,1,.69,1.85V21c0,.27.16.59.67.5A10,10,0,0,0,12,2Z"})),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_material_ui_core__WEBPACK_IMPORTED_MODULE_2__.a,{variant:"subtitle2",className:classes.github},"Github")))))}))}.call(this,__webpack_require__(183)(module))},296:function(module,exports,__webpack_require__){__webpack_require__(297),__webpack_require__(443),__webpack_require__(184),module.exports=__webpack_require__(648)},361:function(module,exports){},645:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxblue.d5fa6462.svg"},648:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(47);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(649),__webpack_require__(654)],module)}.call(this,__webpack_require__(183)(module))},649:function(module,exports,__webpack_require__){var map={"./welcome.stories.tsx":291};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=649},650:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/circles-bg.0bdac9a5.svg"},651:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/pxb-icon.c26b974a.svg"},654:function(module,exports,__webpack_require__){var map={"./api.stories.tsx":655,"./welcome.stories.tsx":291};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=654},655:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__.d(__webpack_exports__,"stories",(function(){return stories}));var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(47),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),stories=Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.storiesOf)("API/Documentation",module),docFn=function(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,((banner=window.top.document.getElementsByClassName("simplebar-content")[1]).setAttribute("style","display: none"),void(window.top.location.href.includes("/story/")&&(window.top.history.replaceState(null,"",window.top.location.href.replace("/story/","/info/")),banner.children[0].children[0].children[0].children[1].click()))));var banner};stories.add("Channel Value",docFn,{notes:{markdown:__webpack_require__(656)}}),stories.add("Empty State",docFn,{notes:{markdown:__webpack_require__(657)}}),stories.add("Header",docFn,{notes:{markdown:__webpack_require__(658)}}),stories.add("Hero",docFn,{notes:{markdown:__webpack_require__(659)}}),stories.add("Icon Wrapper",docFn,{notes:{markdown:__webpack_require__(660)}}),stories.add("Info List Item",docFn,{notes:{markdown:__webpack_require__(661)}}),stories.add("Score Card",docFn,{notes:{markdown:__webpack_require__(662)}}),stories.add("Theme",docFn,{notes:{markdown:__webpack_require__(663)}}),stories.add("Typography",docFn,{notes:{markdown:__webpack_require__(664)}})}.call(this,__webpack_require__(183)(module))},656:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Channel Value\nThe ChannelValue component is used to display...a channel value (and units). This component abstracts the styles used to display the channel and units as well as an optional inline icon. These are used as part of the [Hero](./hero.md) component, but can also be used inline (e.g., in a list)\n\n<img width=\"300\" alt=\"Channel Value component\" src=\"./images/channelValue.png\">\n\n> Note: If provided, the IconClass must be a React.ComponentClass or React.FunctionComponent with props of `{ size: number, color: string }`. This library exposes a `wrapIcon` higher-order function that can convert components from `react-native-vector-icons` or from `@pxblue/icons-svg` to this format. See [IconWrapper](./iconWrapper.md).\n\n### Usage\n```typescript\nimport { ChannelValue, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<ChannelValue\n    value={100}\n    units={'%'}\n    IconClass={Battery}\n/>\n```\n\n### API\n| Prop Name | Description                             | Type                                                               | Required | Default             | Examples                      |\n|-----------|-----------------------------------------|--------------------------------------------------------------------|----------|---------------------|-------------------------------|\n| value     | The value shown below the icon          | `string` &vert; `number`                                           | yes      |                     | 123, 'on'                     |\n| IconClass | A component to render for the icon      | `React.Component<{ size: number, color: string }>`                 | no       |                     | `<WrappedLeaf/>`              |\n| units     | The units for the supplied value        | `string`                                                           | no       |                     | 'hz', '$'                     |\n| prefix    | If true, shows units before the value   | `boolean`                                                          | no       | false               | true, false                   |\n| fontSize  | The size of the font for the value      | keyof [`theme.sizes`](./theme.md)                                  | no       | 'medium'            | 'extraLarge'                  |\n| color     | The color used for the text elements    | `string`                                                           | no       | `theme.colors.text` | 'black', '#000000'            |\n| theme     | Theme partial for default styling       | `DeepPartial<Theme>`                                               | no       |                     | { colors: { text: 'green' } } |\n"},657:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# EmptyState\nThe EmptyState component is an element that can be used as a placeholder when no data is present (such as an empty list, or a placeholder page for future content). This is only used when no data is available, rather than during loading (see [empty states pattern](https://pxblue.github.io/patterns/empty-states)).\n\n<img width=\"500\" alt=\"Empty state with all props\" src=\"./images/emptyState.png\">\n\n## Usage\n```typescript\nimport { EmptyState, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<EmptyState \n    title={'Nothing Found'} \n    description={'Not a single thing'}\n    IconClass={Battery} \n/>\n```\n\n## API\n| Prop Name   | Description                             | Type                                               | Required | Default | Examples                        |\n|-------------|-----------------------------------------|----------------------------------------------------|----------|---------|---------------------------------|\n| title       | The main text to display                | `string`                                           | yes      |         | 'No Data Found'                 |\n| description | The secondary text to display           | `string`                                           | no       |         | 'Come back to this page later'  |\n| IconClass   | The primary icon                        | `React.Component<{ size: number, color: string }>` | no       |         | `WrappedLeaf`                   |\n| iconSize    | The size of the primary icon (100-200)  | `number`                                           | no       | 100     | 24                              |\n| iconColor   | The color of the primary icon           | `string`                                           | no       | `text`  | 'red'                           |\n| actions     | Additional components to render below   | `JSX.Element`                                      | no       |         | `<Button title={'click me'} />` |\n| theme       | Theme partial for default styling       | `DeepPartial<Theme>`                               | no       |         | { colors: { text: 'green' } }   |\n"},658:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Header\nThe header component is used at the top of the page to display page information. It shows a title and has optional parameters to show a subtitle, background image, navigation button, and multiple action buttons. The header can also be configured to expand/collapse as desired.\n\n<img width=\"400\" alt=\"Collapsed header\" src=\"./images/header_small.png\">\n<img width=\"400\" alt=\"Expanded header\" src=\"./images/header_large.png\">\n\n### Usage\n```typescript\nimport { Header } from '@pxblue/react-native-components';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nconst MenuIcon = wrapIcon({IconClass: Icon, name:'menu'});\nconst MoreIcon = wrapIcon({IconClass: Icon, name:'more-vert'});\n...\n<Header\n    title={'Valley Forge'}\n    subtitle={'The Last Stand'}\n    navigation={{icon: MenuIcon, onPress: () => {}}}\n    actionItems={[\n        {icon: MoreIcon, onPress: () => {}}\n    ]}\n/>\n```\n\n### API\n| Prop Name         | Description                             | Type                  | Required | Default                  | Examples                                   |\n|-------------------|-----------------------------------------|-----------------------|----------|--------------------------|--------------------------------------------|\n| title             | The text to show on the first line      | `string`              | yes      |                          | 'Hello World'                              |\n| subtitle          | The text to show on the second line     | `string`              | no       |                          | 'Subtitle'                                 |\n| info              | Third line of text (hidden on collapse) | `string`              | no       |                          | 'Hidden Text'                              |\n| navigation        | Icon to show left of the title          | `HeaderIcon`          | no       |                          | `{icon: MenuIcon, onClick: () => {}}`      |\n| actionItems       | Icons to show to the right of the title | `HeaderIcon[]`        | no       |                          |                                            |\n| expandable        | Allow the header to expand/collapse     | `boolean`             | no       | `false`                  |                                            |\n| startExpanded     | Default the header to expanded          | `boolean`             | no       | `false`                  |                                            |\n| backgroundColor   | The color used for the background       | `string`              | no       | `theme.colors.primary`   | 'white', 'blue'                            |\n| fontColor         | The color used for the text             | `string`              | no       | `theme.colors.onPrimary` | '#000000'                                  |\n| backgroundImage   | An image to display in the header       | `ImageSourcePropType` | no       |                          | `require('../assets/background.jpg')`      |\n| searchableConfig  | Configuration for search behavior       | `SearchableConfig`    | no       |                          | { placeholder: 'Search', autoFocus: true } |\n| theme             | Theme partial for default styling       | `DeepPartial<Theme>`  | no       |                          | { colors: { text: 'green' } }              |\n\n#### HeaderIcon\nHeader icons specified as a JSON object with the following properties:\n\n| Key               | Description                             | Type                                               | Required | Default             | Examples                                |\n|-------------------|-----------------------------------------|----------------------------------------------------|----------|---------------------|-----------------------------------------|\n| icon              | A component to render for the icon      | `React.Component<{ size: number, color: string }>` | yes      |                     | `WrappedLeaf`                           |\n| onPress           | A function to execute when clicked      | `function`                                         | yes      |                     | `() => console.log('pressed')`          |\n\n#### SearchableConfig\nSearchableConfig is an optional object used to configure the search functionality of the header component. It is a JSON object with the following properties:\n\n| Key               | Description                             | Type                                               | Required | Default             | Examples                                |\n|-------------------|-----------------------------------------|----------------------------------------------------|----------|---------------------|-----------------------------------------|\n| icon              | An override for the default search icon | `React.Component<{ size: number, color: string }>` | no       | `SearchIcon`        | `WrappedLeaf`                           |\n| placeholder       | Helper text shown in search field       | `string`                                           | no       | 'Search'            | 'Search by Device'                      |\n| autoFocus         | Gives focus to search input when opened | `boolean`                                          | no       | `false`             |                                         |\n| onChangeText      | Callback when search text changes       | `function`                                         | no       | `null`              | `() => console.log('pressed')`          |\n| autoCapitalize    | Auto-capitalize search input            | [`TextInput.autoCapitalize`](shorturl.at/vzKR7)    | no       | 'none'              | 'words'                                 |\n| autoCorrect       | Auto-correct search input               | `boolean`                                          | no       | `false`             |                                         |\n"},659:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Hero Components\nHero items are used to call attention to particular values.\n\n<img width=\"500\" alt=\"Hero banner with heroes\" src=\"./images/hero.png\">\n\n## Hero\nThe Hero component displays a particular icon, value/units, and a label. The [IconClass](./iconWrapper.md) property will accept any valid icon from @pxblue/icons-svg or react-native-vector-icons.\n\n> In the future this component will be extended to work with other graphic types, including progress icons, text, and emojis.\n\nThe value section of the Hero utilizes a [ChannelValue](./channel-value.md) component. To display a single simple value, the information can be passed as props (```value```, ```units```, ```valueIcon```). For more complex values (such as a duration that displays hours and minutes), you can pass in ```<ChannelValue/>``` components as children and they will be displayed inline.\n\n### Hero Usage\n```typescript\nimport { Hero, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n<Hero \n    label={'Charge'}\n    IconClass={Battery}\n    value={100}\n    units={'%'}\n/>\n```\n\n### Hero API\n| Prop Name           | Description                             | Type                                                               | Required | Default                | Examples                       |\n|---------------------|-----------------------------------------|--------------------------------------------------------------------|----------|------------------------|--------------------------------|\n| label               | The text shown below the `ChannelValue` | `string`                                                           | yes      |                        | 'Status'                       |\n| IconClass           | The primary icon                        | `React.Component<{ size: number, color: string }>`                 | yes      |                        | `WrappedLeaf`                  |\n| iconSize            | The size of the primary icon (10-48)    | `number`                                                           | no       | 36                     | 24                             |\n| iconColor           | The color of the primary icon           | `string`                                                           | no       | `text`                 | 'red'                          |\n| iconBackgroundColor | The color behind the primary icon       | `string`                                                           | no       | `theme.colors.surface` | 'red'                          |\n| fontSize            | The text size for the value line        | keyof [`theme.sizes`](./theme.md)                                  | no       | 'large'                | 'medium'                       |\n| value               | The value for the channel               | `string` &vert; `number`                                           | no       |                        | 240, 'Off'                     |\n| ValueIconClass      | The icon to show inline with the value  | `React.Component<{ size: number, color: string }>`                 | no       |                        | `WrappedLeaf`                  |\n| valueColor          | Text color for the value line           | `string`                                                           | no       | `text`                 | 'primary'                      |\n| units               | Text to show after the value            | `string`                                                           | no       |                        | 'Hz', '$'                      |\n| onPress             | A function to execute when clicked      | `function`                                                         | no       |                        | `() => console.log('pressed')` |\n| theme               | Theme partial for default styling       | `DeepPartial<Theme>`                                               | no       |                        | { colors: { text: 'green' } }  |\n\n\n## HeroBanner\nThe HeroBanner component is a simple wrapper component that is used to contain `<Hero/>`s. It creates the flex container and sets up the spacing rules to display them. It accepts up to four `<Hero/>` components by default as children. Any children after the ```limit``` will not be rendered.\n\n### HeroBanner Usage\n```typescript\nimport { Hero, HeroBanner, wrapIcon } from '@pxblue/react-native-components';\nimport _Battery from '@pxblue/icons-svg/battery.svg';\nconst Battery = wrapIcon({ IconClass: _Battery });\n...\n...\n<HeroBanner divider>\n    <Hero label={'Hero One'} IconClass={Battery}/>\n    <Hero label={'Hero Two'} IconClass={Battery}/>\n    <Hero label={'Hero Three'} IconClass={Battery}/>\n    <Hero label={'Hero Four'} IconClass={Battery}/>\n</HeroBanner>\n```\n\n### HeroBanner API\n| Prop Name | Description                             | Type      | Required | Default | Examples |\n|-----------|-----------------------------------------|-----------|----------|---------|----------|\n| divider   | Whether to show the line separator      | `boolean` | no       | false   |          |\n| limit     | Max number of children to display       | `number`  | no       | 4       | 3        |\n"},660:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Icon Wrapper\nThe Icon Wrapper is a utility that allows the PX Blue components to interact nicely with SVG icons from react-native-vector-icons and @pxblue/icons-svg. Several components in this library accept a `IconClass` property of the type `React.ComponentType<{ size: number, color: string }>`. This allows the icon to be parameterized while allowing the library component to control the icon's size and color.\n\nHowever, the recommended icon libraries, `@pxblue/icons-svg` and `react-native-vector-icons`, do not not conform to this shape. Therefore, this utility exports `wrapIcon`, a Higher Order Component that can be used to convert them.\n\n### Usage (@pxblue/icons-svg)\n```typescript\nimport Leaf from '@pxblue/icons-svg/leaf.svg';\nconst LeafIcon = wrapIcon({ IconClass: Leaf });\n...\n<ComponentName IconClass={LeafIcon}></ComponentName>\n```\n\n### Usage (react-native-vector-icons)\nIcons from react-native-vector-icons require a class and a name. Refer to the [documentation](https://github.com/oblador/react-native-vector-icons) for which icons are available in each set.\n\n```typescript\nimport MaterialCommunityIcon from 'react-native-vector-icons/MaterialCommunityIcons';\nconst Cloud = wrapIcon({ IconClass: MaterialCommunityIcon, name: 'cloud-off-outline' });\n...\n<ComponentName IconClass={Cloud}></ComponentName>\n```\n\n## Notes\n\nAs with all Higher Order Components, there is a performance hit if the function is called from another component's `render` method. It is therefore advised to always call `wrapIcon()` once per Icon type, and to do so outside of any methods.\n"},661:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# InfoListItem\nThe InfoListItem is intended to be used in List views. It positions a title as well as optional subtitle(s), icon, and status stripe. The [IconClass](./iconWrapper.md) property will accept any valid icon from @pxblue/icons-svg or react-native-vector-icons.\n\n<img width=\"400\" alt=\"Info List Item component\" src=\"./images/infoListItem.png\">\n\n### Usage\n```typescript\nimport Leaf from '@pxblue/icons-svg/leaf.svg';\nimport { wrapIcon } from '@pxblue/react-native-components';\nconst LeafIcon = wrapIcon({ IconClass: Leaf });\n...\n<InfoListItem\n    title={'Title'}\n    IconClass={LeafIcon}\n    subtitle={'A subtitle'}\n    statusColor={PXBColors.red[500]}\n    backgroundColor={PXBColors.blue[50]}\n/>\n```\n#### Advanced Usage\nYou can also supply an array of items that will be displayed as a character-separated subtitle. The separation character is configurable.\n\n```typescript\n<InfoListItem\n    title={'Hillman Field East'}\n    subtitle={['PXM 2000', 'DT 1150', '113.4 GPM']}\n    subtitleSeparator={'/'}\n/>\n```\n\n### API\n| Prop Name         | Description                             | Type                                               | Required | Default             | Examples                                |\n|-------------------|-----------------------------------------|----------------------------------------------------|----------|---------------------|-----------------------------------------|\n| title             | The text to show on the first line      | `string`                                           | yes      |                     | 123, 'on'                               |\n| subtitle          | The text to show on the second line     | `string` &vert; `Array<React.ReactNode>`           | no       |                     | 'Subtitle', ['one', 'two', <LeafIcon/>] |\n| subtitleSeparator | Separator character for subtitle        | `string`                                           | no       | '·' ('\\u00B7')      | '-', '/'                                |\n| IconClass         | A component to render for the icon      | `React.Component<{ size: number, color: string }>` | no       |                     | `WrappedLeaf`                           |\n| iconColor         | The color of the primary icon           | `string`                                           | no       |                     | 'red'                                   |\n| hidePadding       | Remove left padding if no icon is used  | `boolean`                                          | no       | false               |                                         |\n| avatar            | Show colored background for icon        | `boolean`                                          | no       | false               |                                         |\n| chevron           | Add a chevron icon on the right         | `boolean`                                          | no       | false               |                                         |\n| dense             | Smaller height row with less padding    | `boolean`                                          | no       | false               |                                         |\n| divider           | Show a row separator below the row      | 'full' &vert; 'partial'                            | no       |                     |                                         |\n| rightComponent    | Component to render on the right side   | `JSX.Element`                                      | no       |                     | `<ChannelValue/>`                       |\n| statusColor       | Status stripe and icon color            | `string`                                           | no       |                     | '#ff3333', 'orange'                     |\n| fontColor         | Title text color                        | `string`                                           | no       |                     | '#ff3333', 'orange'                     |\n| backgroundColor   | The color used for the background       | `string`                                           | no       |                     | 'white', 'blue'                         |\n| onPress           | A function to execute when clicked      | `function`                                         | no       |                     | `() => console.log('pressed')`          |\n| theme             | Theme partial for default styling       | `DeepPartial<Theme>`                               | no       |                     | { colors: { text: 'green' } }           |\n"},662:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# ScoreCard component\nCard component that calls attention to particular values.\n\n<img width=\"40%\" alt=\"Score Card with single highlighted value\" src=\"./images/scorecard.png\"><br/>\n<img width=\"40%\" alt=\"Score Card with multiple highlighted values\" src=\"./images/scorecard_alt.png\">\n\n### Usage\n```typescript\nimport { Hero, HeroBanner, Body, ScoreCard, wrapIcon } from '@pxblue/react-native-components';\nimport { ListItem } from 'react-native-elements';\nimport MatIcon from 'react-native-vector-icons/MaterialIcons';\nimport _A from '@pxblue/icons-svg/grade_a.svg';\nconst A = wrapIcon({ IconClass: _A });\nconst MoreIcon = wrapIcon({ IconClass: MatIcon, name: 'more-vert' });\n...\n<ScoreCard\n    headerTitle={'Portland Datacenter Long Name'}\n    headerSubtitle={'6 UPS Devices'}\n    actionItems={[\n        { icon: MoreIcon, onPress: () => { } }\n    ]}\n    badgeOffset={-55}\n    badge={\n        <HeroBanner style={{ flex: 0, minWidth: 80, justifyContent: 'flex-end' }}>\n            <Hero\n                label={'Score'}\n                iconSize={48}\n                iconColor={PXBColors.green[500]}\n                value={98}\n                units={'/100'}\n                IconClass={A}\n            />\n        </HeroBanner>\n    }\n    actionRow={\n        <ScoreCard.ListItem label={'View Location'} onPress={() => { }} />\n    }\n>\n    <ListItem\n        leftIcon={<MatIcon name={'notifications'} size={24} />}\n        title={<Body color={'error'}>1 Alarm</Body>}\n    />\n</ScoreCard>\n```\n\n### API\n| Prop Name             | Description                                 | Type                  | Required | Default                  | Examples                              |\n|-----------------------|---------------------------------------------|-----------------------|----------|--------------------------|---------------------------------------|\n| headerTitle           | The primary text                            | `string`              | yes      |                          | 'Dos Valley Field'                    |\n| headerSubtitle        | The secondary text                          | `string`              | no       |                          | '5 Devices                            |\n| headerInfo            | Tertiary text (hidden on collapse)          | `string`              | no       |                          | 'Online'                              |\n| headerColor           | The color of the header                     | `string`              | no       | `theme.colors.primary`   | 'red'                                 |\n| headerFontColor       | The color for text and icons in header      | `string`              | no       | `theme.colors.onPrimary` | '#000000'                             |\n| headerBackgroundImage | An image to display in the header           | `ImageSourcePropType` | no       |                          | `require('../assets/background.jpg')` |\n| actionItems           | Icons to show to the right of the text      | `HeaderIcon[]`        | no       |                          |                                       |\n| badge                 | The component to render in the callout area | `React.Component`     | no       |                          | `<HeroBanner><Hero/></HeroBanner>`    |\n| badgeOffset           | Vertical offset for the badge component     | `number`              | no       |                          | -55                                   |\n| actionRow             | Component to render for the footer          | `React.Component`     | no       |                          | `<ScoreCard.ListItem/>                |\n| theme                 | Theme partial for default styling           | `DeepPartial<Theme>`  | no       |                          | { colors: { text: 'green' } }         |\n\n#### HeaderIcon\nHeader icons specified as a JSON object with the following properties:\n\n| Key               | Description                             | Type                                               | Required | Default             | Examples                                |\n|-------------------|-----------------------------------------|----------------------------------------------------|----------|---------------------|-----------------------------------------|\n| icon              | A component to render for the icon      | `React.Component<{ size: number, color: string }>` | yes      |                     | `WrappedLeaf`                           |\n| onPress           | A function to execute when clicked      | `function`                                         | yes      |                     | `() => console.log('pressed')`          |\n\n#### ScoreCard.ListItem\nScoreCard.ListItem is a helper component that can be used for the footer of the ScoreCard. \n\n```typescript\nimport { ScoreCard } from '@pxblue/react-native-components';\n...\n<ScoreCard.ListItem label={'View Location'} onPress={() => { }} />\n```\n\n| Prop Name | Description                             | Type       | Required | Default | Examples       |\n|-----------|-----------------------------------------|------------|----------|---------|----------------|\n| label     | Text to show in the action row          | `string`   | yes      |         | 'View Details' |\n| onPress   | Callback function for onPress event     | `function` | no       |         | () => { }      |\n"},663:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Theming\nComponents in this library are themed using [@callstack/react-theme-provider](https://github.com/callstack/react-theme-provider). When using the ```<ThemeProvider``` from this library, all child components will inherit various styling properties from the default theme.\n\n## Overview\nA Theme is a single JSON object with the following structure:\n\n```typescript\n{\n  roundness: number\n  colors: {\n    primary: string\n    background: string\n    surface: string\n    accent: string\n    error: string\n    text: string\n    onPrimary: string\n  }\n  fonts: {\n    extraBold: Partial<Font>;\n    bold: Partial<Font>;\n    semiBold: Partial<Font>;\n    regular: Partial<Font>;\n    light: Partial<Font>;\n  }\n  sizes: {\n    tiny: number;\n    extraSmall: number;\n    small: number;\n    medium: number;\n    large: number;\n    extraLarge: number;\n    giant: number;\n  }\n}\n```\n`Font` is another object with the following format:\n\n```typescript\n{\n  fontFamily: string\n  fontWeight: TextStyle['fontWeight']\n}\n```\n\n## Using the Theme\nTo use the theme from this library, simply wrap your application in a ```<ThemeProvider>``` and the rest is handled for you.\n\n```typescript\nimport { ThemeProvider } from '@pxblue/react-native-components';\n...\n<ThemeProvider>\n  <YourApp />\n</ThemeProvider>\n```\n\n## Using the Theme in Custom Components\nTo use the theme properties in your custom components, you can use the ```withTheme``` HOC to inject the theme into your component.\n\n```typescript\nimport { withTheme, WithTheme } from '@pxblue/react-native-components';\nconst Example = withTheme(({ theme, ...props }: WithTheme<ViewProps>) => {\n  const { colors, roundness } = theme;\n\n  return (\n    <View {...props} style={{\n      backgroundColor: colors.primary,\n      borderRadius: roundness,\n      width: 200,\n      height: 100\n    }}>\n      <Text>The background color and borderRadius came from the theme!</Text>\n    </View>\n  );\n});\n\n...\n\n<Example />\n```\n\n## Overriding the Theme\nIf you need to override the theme, you can do so by providing a ```theme``` property to the ```ThemeProvider```.\n\n```typescript\n<ThemeProvider theme={{\n  roundness: 3,\n  fonts: {\n    extraBold: {\n      fontFamily: 'MyFont',\n      fontWeight: '800'\n    },\n    bold: {\n      fontFamily: 'MyFont',\n      fontWeight: '700'\n    },\n    semiBold: {\n      fontFamily: 'MyFont',\n      fontWeight: '600'\n    },\n    regular: {\n      fontFamily: 'MyFont',\n      fontWeight: '400'\n    },\n    light: {\n      fontFamily: 'MyFont',\n      fontWeight: '300'\n    }\n  },\n  colors: {\n    primary: blue[600],\n    background: white[500],\n    surface: white[200],\n    accent: blue[700],\n    error: red[500],\n    text: gray[600],\n    onPrimary: white[200]\n  },\n  sizes: {\n    tiny: 10,\n    extraSmall: 12,\n    small: 14,\n    medium: 16,\n    large: 20,\n    extraLarge: 24,\n    giant: 34\n  }\n}}>\n  <YourApp />\n</ThemeProvider>\n```\n\n### For a Single Component\nIf you don't want to modify the theme for all components, but rather just one individual component, you can do so by directly passing a ```theme``` (or partial theme) property to the component. The following example overrides the text color of the Title component.\n\n```typescript\n<Title theme={{ colors: { text: { 'green' } } }}>My text</Title>\n```\n"},664:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="# Typography\nTypography components are used to render text on the screen. This library provides several helper components that automatically apply various styles from the theme to avoid repeated custom styling throughout an application.\n\n<img width=\"20%\" alt=\"Typography Elements\" src=\"./images/typography.png\">\n\nWe provide components for: ```<H1>```, ```<H2>```, ```<H3>```, ```<H4>```, ```<H5>```, ```<H6>```, ```<Label>```, ```<Body>```, ```<Subtitle>```, ```<Caption>```\n\n### Usage\n\n```typescript\nimport * as Typography from '@pxblue/react-native-components';\n...\n<View>\n    <Typography.H1>Head. 1</Typography.H1>\n    <Typography.H2>Heading 2</Typography.H2>\n    <Typography.H3>Heading 3</Typography.H3>\n    <Typography.H4>Heading 4</Typography.H4>\n    <Typography.H5>Heading 5</Typography.H5>\n    <Typography.H6>Heading 6</Typography.H6>\n    <Typography.Label>Label</Typography.Label>\n    <Typography.Body>Body</Typography.Body>\n    <Typography.Subtitle>Subtitle</Typography.Subtitle>\n    <Typography.Caption>Caption</Typography.Caption>\n</View>\n```\n\n### API\nAll typography components in this library share a common API.\n\n| Prop Name | Description                             | Type                               | Required | Default | Examples                      |\n|-----------|-----------------------------------------|------------------------------------|----------|---------|-------------------------------|\n| font      | The font style (from the theme)         | keyof [`theme.fonts`](./theme.md)  | no       |         | 'bold'                        |\n| fontSize  | The font size (from the theme)          | keyof [`theme.sizes`](./theme.md)  | no       |         | 'large'                       |\n| color     | The font color (from theme palette)     | keyof [`theme.colors`](./theme.md) | no       | 'text'  | 'primary'                     |\n| theme     | Theme partial for default styling       | `DeepPartial<Theme>`               | no       |         | { colors: { text: 'green' } } |\n"}},[[296,1,2]]]);
//# sourceMappingURL=main.7649647e8ea53810abe6.bundle.js.map